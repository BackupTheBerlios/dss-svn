#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
#
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001

# Uncomment this to turn on verbose mode.
export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS=-v

p_dir = $(CURDIR)/debian
p_utils = unionfs-utils
p_source = unionfs-source
s_name = unionfs
build_utils = debian/unionfs-utils
build_source = debian/unionfs-source
dirs_to_clean = $(build_utils) $(build_source) debian/tmp-source
stamps_to_clean = build-utils-stamp build-source-stamp
SNAPSHOT=$(shell echo $(VERSION) 
CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

### KERNEL SETUP
### Setup the stuff needed for making kernel module packages
### taken from /usr/share/kernel-package/sample.module.rules

# prefix of the target package name
PACKAGE=unionfs-modules
# modifieable for experiments or debugging m-a
MA_DIR ?= /usr/share/modass
# load generic variable handling
-include $(MA_DIR)/include/generic.make
# load default rules, including kdist, kdist_image, ...
-include $(MA_DIR)/include/common-rules.make
  
# module assistant calculates all needed things for us and sets
# following variables:
# KSRC (kernel source directory), KVERS (kernel version string), KDREV
# (revision of the Debian kernel-image package), CC (the correct
# compiler), VERSION (the final package version string), PKGNAME (full
# package name with KVERS included), DEB_DESTDIR (path to store DEBs)
  
# The kdist_configure target is called by make-kpkg modules_config and
# by kdist* rules by dependency. It should configure the module so it is
# ready for compilation (mostly useful for calling configure).
# prep-deb-files from module-assistant creates the neccessary debian/ files 
kdist_config: prep-deb-files
  
# the kdist_clean target is called by make-kpkg modules_clean and from
# kdist* rules. It is responsible for cleaning up any changes that have
# been made by the other kdist_commands (except for the .deb files created)
kdist_clean: clean
#  	$(MAKE) -f debian/rules clean
#	rm -f driver/*.o driver/*.ko
#
### end  KERNEL SETUP

# module-assistant stuff
# the binary-modules rule is invoked by module-assistant while processing the
# kdist* targets. It is called by module-assistant or make-kpkg and *not*
# during a normal build
DH_OPTIONS=-p$(PACKAGE) -Pdebian/$(PKGNAME) 
binary-modules:
	dh_testroot
	dh_clean -k
	dh_installdirs lib/modules/$(KVERS)/kernel/fs
	m_ver=unionfs$(shell echo $(KVERS) | cut -d. -f1,2)
	# Build the module
	$(MAKE)  UNIONFS_OPT_CFLAG=-O2 	UNIONFS_DEBUG_CFLAG=-g 	TOPINC=-I$(KSRC)/include 	LINUXSRC=$(KSRC) 	EXTRACFLAGS=-DUNIONFS_UNSUPPORTED KSRC=$(KSRC) 	KVERS=$(KVERS)  $(m_ver)
# Install the module
	cp unionfs.$(shell echo $(KVERS) | grep -q ^2.6 && echo k)o  debian/$(PKGNAME)/lib/modules/$(KVERS)/kernel/fs

	dh_installdocs 
	dh_installchangelogs
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol -- -v$(VERSION)
	dh_md5sums
	dh_builddeb --destdir=$(DEB_DESTDIR)
	dh_clean -k




configure: configure-stamp
configure-stamp:
	dh_testdir
	# Add here commands to configure the package.

#Architecture 
build: 

build-utils: build-utils-stamp

build-utils-stamp: configure-stamp 

	# Add here commands to compile the arch part of the package.
	#$(MAKE) 
	touch build-utils-stamp

build-source: build-source-stamp

build-source-stamp: configure-stamp 

	# Add here commands to compile the arch part of the package.
	#$(MAKE) 
	touch build-source-stamp


clean:
	dh_testdir
	dh_testroot
	
	# Add here commands to clean up after the build process.
	rm -rf $(dirs_to_clean)
	rm -f $(stamps_to_clean)
	$(MAKE) clean
	#dh_clean 

install: 
	dh_testdir
	dh_testroot
#	dh_clean -k
	$(MAKE) -f debian/rules install-utils
	$(MAKE) -f debian/rules install-source

install-utils: DH_OPTIONS=-p$(p_utils) -P$(build_utils) 
install-utils: build-utils
	dh_installdirs usr/sbin usr/share/man usr/share/doc/unionfs-utils/examples
	$(MAKE) install-utils PREFIX=$(CURDIR)/$(build_utils)/usr  MANDIR=$(CURDIR)/$(build_utils)/usr/share/man
	dh_installchangelogs ChangeLog
	dh_installdocs AUTHORS README
	dh_installexamples snapmerge doit.sh undoit.sh 
	dh_compress
	dh_install
	dh_fixperms
#	dh_installdeb 
	dh_shlibdeps
	dh_installdeb 
	dh_shlibdeps
	dh_strip
	dh_gencontrol
	dh_md5sums
	dh_builddeb 


	
install-source: DH_OPTIONS=-p$(p_source) -P$(build_source) 
install-source:	build-source
	$(MAKE) clean
	dh_installdirs usr/src/modules/$(s_name)/debian
	mkdir -p debian/tmp-source
	tar -c --exclude ".svn"  --exclude "man" --exclude "rpm"  --exclude "CVS" --exclude "debian" * | tar x -C debian/tmp-source
	cp -r debian/tmp-source/* debian/$(p_source)/usr/src/modules/$(s_name)
	cp debian/*modules.in* \
		debian/$(p_source)/usr/src/modules/$(s_name)/debian
	cp  debian/rules debian/changelog debian/copyright debian/control \
		debian/$(p_source)/usr/src/modules/$(s_name)/debian/
	cd debian/$(p_source)/usr/src && tar c modules | bzip2 -9 > $(s_name).tar.bz2 && rm -rf modules
	dh_installdocs  NEWS INSTALL
	dh_install

# Build architecture independant packages using the common target.
binary-indep: DH_OPTIONS=-i

binary-indep: build install
	dh_testdir 
	dh_testroot 
	dh_installchangelogs
	dh_compress
#	dh_link 
	dh_fixperms 
	dh_installdeb 
#	dh_shlibdeps 
	dh_gencontrol 
	dh_md5sums 
	dh_builddeb 
#	$(MAKE) -f debian/rules clean


# Build architecture dependant packages using the common target.
binary-arch : install-utils



binary: binary-arch binary-indep
.PHONY: build clean binary-arch binary-indep binary binary-modules kdist kdist_config kdist_image kdi

