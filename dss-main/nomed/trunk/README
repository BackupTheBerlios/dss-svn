CAMERA:

--------------
info.category: camera
info.bus: usb
exec: gthumb --import-photos & 
--------------

CAMERAICON = os.path.abspath('actors/img/camera.png')
CAMERAICONOFF = os.path.abspath('actors/img/cameraoff.png')

class Actor(DeviceActor):

    __required__ = {'info.category':'camera', 'info.bus':'usb'}

    def on_added(self):
        s = Synaptic()
        packages = ['gthumb']

        def install_packages():
            s.install(packages)
            open_gthumb()

        def open_gthumb():
            os.system('gthumb --import-photos &')

        if s.check(packages):
            actions = {}
        else:
            actions = {"Instalar los paquetes necesarios": install_packages}

        self.msg_render.show("CAMARA", 
             "Cámara digital conectada.",
             CAMERAICON, actions = actions)


    def on_removed(self):
        self.msg_render.show("CAMARA", "Cámara digital desconectada",
                CAMERAICONOFF)

BLUETOOTH:
    
--------------
info.category: bluetooth_hci 
exec: gnome-bluetooth, obexserver, bluez-utils 
--------------

BLUEICON = os.path.abspath('actors/img/bluetooth.png')
BLUEICONOFF = os.path.abspath('actors/img/bluetoothoff.png')

class Actor(DeviceActor):

    __required__ = {'info.category':'bluetooth_hci'}

    def on_added(self):
        s = Synaptic()
        packages = ['gnome-bluetooth', 'obexserver', 'bluez-utils']

        def install_packages():
            if s.install(packages):
                os.system('gnome-obex-server &')
                open_scan()

        def open_scan():
            os.system('gnome-bluetooth-manager &')

        if s.check(packages):
            os.system('gnome-obex-server &')
            actions = {"Abrir el administrador bluetooth": open_scan}
        else:
            actions = {"Instalar los paquetes necesarios": install_packages}

        if self.properties.has_key('bluetooth_hci.interface_name'):
            interface = ': ' + self.properties['bluetooth_hci.interface_name']
        else:
            interface = ''
        print self.msg_render
        self.msg_render.show("BLUETOOTH", 
             "Nueva interfaz bluetooth configurada " + str(interface) +
             '.',
             BLUEICON, actions = actions)


    def on_removed(self):
        self.msg_render.show("BLUETOOTH", "Interfaz bluetooth desconectada",
                BLUEICONOFF)
        os.system('killall gnome-obex-server')

C3POCARDREADER

C3POICON = os.path.abspath('actors/img/ltc31.png')
C3POICONOFF = os.path.abspath('actors/img/ltc31off.png')

class Actor(DeviceActor):

    __required__ = {
      "info.bus":"usb_device",
      "usb_device.vendor_id":0x783,
      "usb_device.product_id":0x6
    }

    def on_added(self):
        s = Synaptic()
        packages = ['pcscd', 'pcsc-tools', 'libccid']

        def install_packages():
            s.install(packages)

        if s.check(packages):
            self.msg_render.show("C3PO", 
                    "Lector de tarjetas detectado",
                    C3POICON)
        else:
            actions = {"Instalar los paquetes necesarios": install_packages}
            self.msg_render.show("C3PO", "Lector de tarjetas detectado", 
                    C3POICON,
                    actions = actions)

    def on_removed(self):
        self.msg_render.show("C3PO", 
                "Lector de tarjetas desconectado",
                C3POICONOFF)

NETWORK

NETWORKICON = os.path.abspath('actors/img/network.png')
NETWORKICONOFF = os.path.abspath('actors/img/networkoff.png')

class Actor (DeviceActor):

    __required__ = {
    "linux.subsystem":"net"
    }

    def on_added(self):
        interface = self.properties['net.interface']
        self.msg_render.show("Red", 
                "Interfaz de red %s conectada" % interface,
                NETWORKICON)

    def on_removed(self):
        interface = self.properties['net.interface']
        self.msg_render.show("Red", 
                "Interfaz de red %s desconectada" % interface,
                NETWORKICONOFF)

PCMCIA

PCMCIAICON = os.path.abspath('actors/img/pcmcia.png')
PCMCIAICONOFF = os.path.abspath('actors/img/pcmciaoff.png')

class Actor(DeviceActor):

    __required__ = {
    'info.bus' : 'pcmcia'
    }

    def on_added(self):
        self.msg_render.show("PCMCIA", "Dispositivo PCMCIA conectado",
                PCMCIAICON)

    def on_removed(self):
        self.msg_render.show("PCMCIA", "Dispositivo PCMCIA desconectado",
                PCMCIAICONOFF)

SCSI-HOST:

class Actor(DeviceActor):

    __required__ = {'info.category' : 'scsi_host'}

    #def on_added(self):
    #    vendor = ''

    #    if self.properties.has_key('info.vendor'):
    #        vendor = ': ' + self.properties['info.vendor']

    #    self.msg_render.show_info("Dispositivo scsi_host detectado" + vendor )

SCSI:


class Actor(DeviceActor):

    __required__ = {'info.bus': 'scsi'}

STORAGE:

class Actor (DeviceActor):

    __required__ = {'info.category': 'storage'}

    def on_add(self):
        print self.properties['storage.requires_eject']


USB:

class Actor(DeviceActor):

    __required__ = {'info.bus' : 'usb'}

USBDEVICE

USBICON = os.path.abspath('actors/img/usb.png')
USBICONOFF = os.path.abspath('actors/img/usboff.png')

class Actor(DeviceActor):

    __required__ = {'info.bus' : 'usb_device'}

    def on_added(self):
        try:
            product = self.properties['usb_device.product']
            vendor = self.properties['info.vendor']
            vendor = vendor and vendor + ', ' or ''
            self.msg_render.show("USB", "Dispositivo usb detectado:\n" +\
                    vendor + product, USBICON)
            self.vendorproduct = vendor + product

        except:
            self.msg_render.show("USB", "Dispositivo usb detectado", USBICON)


    def on_removed(self):
        try:
            self.msg_render.show("USB", "Dispositivo usb desconectado:\n" + \
                    self.vendorproduct, USBICONOFF)
        except:
            self.msg_render.show("USB", "Dispositivo usb desconectado",
                    USBICONOFF)

USBMOUSE:

MOUSEICON = os.path.abspath('actors/img/mouse.png')

class Actor (DeviceActor):

    __required__ = {'info.bus':'usb',
                    'linux.hotplug_type':1,
                    'usb.product':'USB HID Interface'}

    def on_added(self):
        self.msg_render.show("Ratón", "Ratón usb configurado",
                icon = MOUSEICON)



USBPRINTER:


PRINTERICON = os.path.abspath('actors/img/printer.png')
PRINTERICONOFF = os.path.abspath('actors/img/printeroff.png')

class Actor(DeviceActor):

    __required__ = {
        'info.bus': 'usb',
        'info.linux.driver': 'usblp'
    }

    def on_added(self):
        s = Synaptic()
        packages = ['gnome-cups-manager']

        def install_packages():
            if get_sudo():
                s.install(packages)
                open_printer_dialog()

        def open_printer_dialog():
            if get_sudo():
                os.system('sudo /etc/init.d/cupsys restart')
                time.sleep(1)
                os.system('sudo gnome-cups-add &')

        if s.check(packages):
            actions = {"Añadir": open_printer_dialog}
        else:
            actions = {"Instalar los paquetes necesarios": install_packages}

        self.msg_render.show("IMPRESORA", "Impresora detectada",
             PRINTERICON, actions = actions)


    def on_removed(self):
        self.msg_render.show("IMPRESORA", "Impresora desconectada", PRINTERICONOFF)


USBSCANNER:

SCANNERICON = os.path.abspath('actors/img/scanner.png')
SCANNERICONOFF = os.path.abspath('actors/img/scanneroff.png')

# Set True for activate usb_device hack everytime. False for activate hack when
# a scanner is connected.

DEBUG = False


class UsbScannerActorHack(object):
    """
    This class is a hack for usb_device.Actor
    """
    PACKAGES = ['xsane']

    def __init__(self):
        # Hacking usb.Actor class
        Actor.on_added = self.decor(Actor.on_added, self.hack_on_added)
        Actor.on_removed = self.decor(Actor.on_removed, self.hack_on_removed)


    def is_scanner(self, usb_actor):
        grepmap = UsbGrepMap()
        vid = usb_actor.properties['usb_device.vendor_id']
        pid = usb_actor.properties['usb_device.product_id']
        return grepmap.get_module(vid, pid) == 'libusbscanner'
        

    def decor(self, oldf, hack_function):
        "Python Decorator for on_added method."

        def new_method(usb_actor, *args, **kargs):
            oldf(usb_actor, *args, **kargs)
            if DEBUG or self.is_scanner(usb_actor):
                hack_function(usb_actor)

        return new_method


    def hack_on_added(self, usb_actor):
        "usbdevice.Actor.on_added hack"
        assert(isinstance(usb_actor, Actor))

        def run_xsane():
            os.system('xsane & ')

        def install_packages():
            synaptic.install(UsbScannerActorHack.PACKAGES)
            run_xsane()

        synaptic = Synaptic()

        actions = {}
        if synaptic.check(UsbScannerActorHack.PACKAGES):
            actions = {"Ejecutar programa de digitalización": run_xsane}
        else:
            actions = {"Instalar el software necesario": install_packages}

        usb_actor.msg_render.show("ESCÁNER", "Dispositivo escáner detectado",
                                SCANNERICON, actions = actions)


    def hack_on_removed(self, usb_actor):
        "usbdevice.Actor.on_removed hack"
        assert(isinstance(usb_actor, Actor))

        usb_actor.msg_render.show("ESCÁNER", "Dispositivo escáner desconectado",
                                SCANNERICONOFF)


ua = UsbScannerActorHack()


USBWEBCAM:

WEBCAMICON = os.path.abspath('actors/img/webcam.png')
WEBCAMICONOFF = os.path.abspath('actors/img/webcamoff.png')


class UsbWebcamActorHack(object):
    """
    This class is a hack for usb_device.Actor
    """
    PACKAGES = ['camorama']
    DRIVERS = ['quickcam', 'spca5xx', 'ibmcam', 'konicawc', 'ov511', 'pwc', 'se401', 'sn9c102', 'stv680', 'ultracam', 'vicam', 'w9968cf']

    def __init__(self):
        # Hacking usb.Actor class
        Actor.on_added = self.decor(Actor.on_added, self.hack_on_added)
        Actor.on_removed = self.decor(Actor.on_removed, self.hack_on_removed)


    def is_webcam(self, usb_actor):
        ldrv = usb_actor.properties['info.linux.driver']
        return ldrv in UsbWebcamActorHack.DRIVERS
        

    def decor(self, oldf, hack_function):
        "Python Decorator for on_added method."

        def new_method(usb_actor, *args, **kargs):
            oldf(usb_actor, *args, **kargs)
            if self.is_webcam(usb_actor):
                hack_function(usb_actor)

        return new_method


    def hack_on_added(self, usb_actor):
        "usbdevice.Actor.on_added hack"
        assert(isinstance(usb_actor, Actor))

        def run_camorama():
            os.system('camorama & ')

        def install_packages():
            synaptic.install(UsbWebcamActorHack.PACKAGES)
            run_camorama()

        synaptic = Synaptic()

        actions = {}
        if synaptic.check(UsbWebcamActorHack.PACKAGES):
            actions = {"Ejecutar programa de captura": run_camorama}
        else:
            actions = {"Instalar el software necesario": install_packages}

        usb_actor.msg_render.show("WEBCAM", "Webcam detectada",
                                WEBCAMICON, actions = actions)


    def hack_on_removed(self, usb_actor):
        "usbdevice.Actor.on_removed hack"
        assert(isinstance(usb_actor, Actor))

        usb_actor.msg_render.show("WEBCAM", "Webcam desconectada",
                                WEBCAMICONOFF)


ua = UsbWebcamActorHack()

VOLUME:

VOLUMEICON = os.path.abspath('actors/img/volume.png') 

class Actor (DeviceActor):

    __required__ = {'info.category': 'volume'}

    #def on_added(self):
    #    self.msg_render.show_info("Dispositivo de volumen conectado")

    def on_modified(self, key):
        if key == 'volume.is_mounted':
            try:
                if self.properties['volume.is_mounted']:
                    mount_point = self.properties['volume.mount_point']

                    def open_volume():
                        os.system('rox ' + mount_point) 

                    self.message_render.show("Almacenamiento", 
                        "Dispositivo montado en", VOLUMEICON,
                        actions = {mount_point: open_volume})
                    print actions
                else:
                    self.message_render.show("Almacenamiento", 
                            "Dispositivo desmontado", VOLUMEICON) 

            except Exception, e:
                self.logger.error("Error: " + str(e))







