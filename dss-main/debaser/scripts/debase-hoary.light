# $Id: debase-hoary.light,v 1.6 2005/09/19 09:46:40 sf-debaser Exp $
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Daniele Favara <sf.debaser@gmail.com> <http://debased.sourceforge.net>

# debootstrap hoary <path> http://archive.ubuntu.com/ubuntu hoary-morph
# to add : kernel-image-2.6.11 uninfs-modules-2.6.11 ndiswrapper-utils cloop-modules-2.6.11 ddcxinfo-knoppix hwdata-morphix hwsetup-morphix 
#        : morphix-base-{grub,scripts,splash,conf} mountmodule
#(ubuntu): uninfs-utils read-edid nvi ndiswrapper-utils  dialog          
# cd /dev/ && mknod -m 660 cnsole c 5 1
# rm -r tmp && ln -s /var/tmp /tmp
mirror_style main 
download_style apt

work_out_debs () {
	set -x
    required="net-tools base-files base-passwd bash bsdutils coreutils libacl1 libattr1 debconf debconf-i18n liblocale-gettext-perl libtext-iconv-perl libtext-wrapi18n-perl libtext-charwidth-perl debianutils diff dpkg dselect libblkid1 e2fsprogs e2fslibs libcomerr2 libss2 libuuid1 findutils grep gzip hostname libcap1 libdb1-compat libdb3 libncurses5 libnewt0.51 libpam-modules libpam-runtime libpam0g libpopt0 login makedev mawk mount ncurses-base ncurses-bin passwd perl-base procps python-minimal python2.4-minimal sed slang1a-utf8 lsb-base initscripts sysvinit sysv-rc tar util-linux zlib1g whiptail libgcc1 gcc-3.3-base libstdc++5 "

    base="adduser  apt apt-utils  base-config  bsdmainutils  console-common console-data console-tools  cron dash dhcp3-client dhcp3-common discover1 discover1-data  ed eject fdutils file  gettext-base  groff-base hotplug  ifupdown info iptables iputils-ping klogd libconsole libdb4.2 libdiscover1  libgc1 libgcrypt11 libgdbm3 libgnutls11 libgpg-error0 libgpmg1  liblockfile1 liblzo1 libmagic1 libncursesw5 libopencdk8 libpcap0.8 libsigc++-1.2-5c102 libssl0.9.7 libtasn1-2 libusb-0.1-4 libwrap0  logrotate lsb-release module-init-tools nano  netbase netkit-inetd pciutils psmisc  sysklogd tcpd udev usbutils wget cpio libpcre3 libtextwrap1 perl perl-modules ubuntu-keyring gnupg libbz2-1.0 libldap2 libsasl2 libsasl2-modules man-db  binutils  $additional"

    without_package () {
        echo "$2" | tr ' ' '\n' | grep -v "^$1$" | tr '\n' ' '
    }
    subst_package () {
        echo "$3" | tr ' ' '\n' | sed "s/^$1$/$2/" | tr '\n' ' '
    }

    LIBC6=libc6

    case $ARCH in
        "i386")
            required="$required libc6 libc6-i686"
            base="$base"
            ;;
        "powerpc")
            required="$required libc6 libreadline4"
            base="$base hfsplus hfsutils libelfg0 libhfsp0 ltrace mac-fdisk pmac-fdisk powerpc-utils"
            ;;
        "amd64")
            required="$required libc6"
            base="$base dmidecode libelfg0 ltrace memtest86+ libreadline4"
            ;;
        "ia64")
            required="$required libc6.1 libunwind7"
            base="$base dmidecode libreadline4"
            LIBC6="libc6.1"
            ;;
        "sparc")
            required="$required libc6"
            base="$base lib64gcc1 libc6-sparc64 libreadline4"
            ;;
        *)
            # who knows?
            ;;
    esac

    all_debs="$required $base"

    for x in $exclude; do
      all_debs="$(without_package "$x" "$all_debs")"
    done
    
}
setup_fstab () {
: > "$TARGET/etc/apt/sources.list.bk"
 echo 'deb http://www.morphix.org/debian/ ./'  > "$TARGET/etc/apt/sources.list.bk"
 echo 'deb http://developer.linuxtag.net/knoppix/ ./ ' >> "$TARGET/etc/apt/sources.list.bk"
 echo 'deb http://archive.ubuntu.com/ubuntu/ hoary main multiverse restricted universe'  >> "$TARGET/etc/apt/sources.list.bk"
 cat  "$TARGET/etc/apt/sources.list.bk"
 echo "$TARGET/etc/apt/sources.list.bk"

}

install_debs () {
    first_stage_install
    second_stage_install
}

first_stage_install () {
    extract $required

    mkdir -p "$TARGET/var/lib/dpkg"
    : >"$TARGET/var/lib/dpkg/status"
    : >"$TARGET/var/lib/dpkg/available"

    setup_etc
    if [ ! -e "$TARGET/etc/fstab" ]; then
        echo '# UNCONFIGURED FSTAB FOR BASE SYSTEM' > "$TARGET/etc/fstab"
        chown 0.0 "$TARGET/etc/fstab"; chmod 644 "$TARGET/etc/fstab"
    fi

    setup_proc
    setup_devices

    in_target /sbin/ldconfig

    p () {
	baseprog="$(($baseprog + ${1:-1}))"
    }

    x_feign_install () {
        local pkg="$1"
        local deb="$(debfor $pkg)"
        local ver="$(
            ar -p "$TARGET/$deb" control.tar.gz | zcat |
                tar -O -xf - control ./control 2>/dev/null |
                sed -ne 's/^Version: *//Ip' | head -n 1
        )"

        mkdir -p "$TARGET/var/lib/dpkg/info"

        echo \
"Package: $pkg
Version: $ver
Status: install ok installed" >> "$TARGET/var/lib/dpkg/status"

        touch "$TARGET/var/lib/dpkg/info/${pkg}.list"
    }

    x_feign_install dpkg
}

second_stage_install () {
    x_core_install () {
	smallyes '' | in_target dpkg --force-depends --install $(debfor "$@")
    }

    DEBIAN_FRONTEND=noninteractive
    DEBCONF_NONINTERACTIVE_SEEN=true
    export DEBIAN_FRONTEND DEBCONF_NONINTERACTIVE_SEEN

    baseprog=0
    bases=40

    p; progress $baseprog $bases INSTCORE "Installing core packages" #1
    info INSTCORE "Installing core packages..."

    p; progress $baseprog $bases INSTCORE "Installing core packages" #2
    ln -sf mawk $TARGET/usr/bin/awk
    x_core_install base-files base-passwd
    p; progress $baseprog $bases INSTCORE "Installing core packages" #3
    x_core_install dpkg

    if [ ! -e "$TARGET/etc/localtime" ]; then
        ln -sf /usr/share/zoneinfo/UTC "$TARGET/etc/localtime"
    fi

    p; progress $baseprog $bases INSTCORE "Installing core packages" #4
    x_core_install $LIBC6

    p; progress $baseprog $bases INSTCORE "Installing core packages" #5
    x_core_install perl-base
    p; progress $baseprog $bases INSTCORE "Installing core packages" #6
    rm $TARGET/usr/bin/awk
    x_core_install mawk
    p; progress $baseprog $bases INSTCORE "Installing core packages" #7
    x_core_install debconf

   info UNPACKREQ "Unpacking required packages..."

    p; progress $baseprog $bases INSTBASE "Installing base system" #8
    smallyes '' | repeat 5 in_target_failmsg UNPACK_REQ_FAIL_FIVE "Failure while unpacking required packages.  This will be attempted up to five times." "" dpkg --force-depends --unpack $(debfor $required)
    p 10; progress $baseprog $bases INSTBASE "Installing base system" #18

    info CONFREQ "Configuring required packages..."

    mv "$TARGET/sbin/start-stop-daemon" "$TARGET/sbin/start-stop-daemon.REAL"
    echo \
"#!/bin/sh
echo
echo \"Warning: Fake start-stop-daemon called, doing nothing\"" > "$TARGET/sbin/start-stop-daemon"
    chmod 755 "$TARGET/sbin/start-stop-daemon"

    setup_dselect_method apt
    #on_exit "(in_target_nofail umount /dev/pts) || true"

    p; progress $baseprog $bases INSTBASE "Installing base system" #19
    smallyes '' | in_target_failmsg CONF_REQ_FAIL "Failure while configuring required packages." "" dpkg --configure --pending --force-configure-any --force-depends
    p 10; progress $baseprog $bases INSTBASE "Installing base system" #29 

#    if [ ! -e "$TARGET/etc/exim/exim.conf" ]; then
#        mkdir -p "$TARGET/etc/exim"
#        touch "$TARGET/etc/exim/exim.conf"
#    fi

    info INSTBASE "Installing base packages..."

    p; progress $baseprog $bases INSTBASE "Installing base system" #30
    smallyes '' | repeat 5 in_target_failmsg INST_BASE_FAIL_FIVE "Failure while installing base packages.  This will be re-attempted up to five times." "" dpkg --force-auto-select --force-overwrite --force-confold --skip-same-version --unpack $(debfor $base)

    rm -f "$TARGET/usr/sbin/sendmail"
    ln -s /bin/true "$TARGET/usr/sbin/sendmail"
	
	[ ! -d $TARGET/dev/pts  ] && mkdir $TARGET/dev/pts 
	[ ! -d $TARGET/dev/shm  ] && mkdir $TARGET/dev/shm
    
	smallyes '' | repeat 5 in_target_failmsg CONF_BASE_FAIL_FIVE "Failure while configuring base packages.  This will be attempted 5 times." "" dpkg  --force-confold --skip-same-version  --configure -a

    rm -f "$TARGET/usr/sbin/sendmail"
   # ln -s exim4 "$TARGET/usr/sbin/sendmail"

    p 9; progress $baseprog $bases INSTBASE "Installing base system" #39

    mv "$TARGET/sbin/start-stop-daemon.REAL" "$TARGET/sbin/start-stop-daemon"

    progress $bases $bases INSTBASE "Installing base system" #40
    info BASESUCCESS "Base system installed successfully."
    
    echo Configuring ...
	setup_fstab
}

