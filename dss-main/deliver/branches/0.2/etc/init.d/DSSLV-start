#!/bin/sh
# $Id$

# DSS-LV start script
# Daniele Favara <danjele@gmail.com> 2005
# <http://dss.berlios.de>
#
# - use user space splash
# - don't change root (unionfs)
# - pcmcia, hotplug ... start as runlevels
#
# Parts of this file have been copied from
#  knoppix-autoconfig : (C) Klaus Knopper <knopper@knopper.net> 2001
#  morphix-start :  Copyright 2003, Alex de Landgraaf, Licensed GPL v2, (www.gnu.org for details)

lname=dss

PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin"
[ -e  "/lib/lsb/init-functions" ] && . /lib/lsb/init-functions 
[ -e  "/lib/lsb/DSSLV-functions" ] && . /lib/lsb/DSSLV-functions 
start (){

# stuff from sysconfig-morph
[ -f /etc/sysconfig/sysconfig ]  && . /etc/sysconfig/sysconfig
[ -f /etc/sysconfig/$lname ] && . /etc/sysconfig/$lname
[ -f /etc/sysconfig/i18n ] && . /etc/sysconfig/i18n


# maybe to get var from cmdline or /etc/sysconfig/sysconfig
LIVENAME="DSS Live"

# CLOCK
hwclock $UTC -s

if [ -f "/usr/share/zoneinfo/$TZ" ]; then
   rm -f /etc/localtime
   cp "/usr/share/zoneinfo/$TZ" /etc/localtime
fi

# NETWORK
# Set up preliminary /etc/network/interfaces
[ -e /usr/sbin/mknetworkinterfaces ] && /usr/sbin/mknetworkinterfaces
ifconfig lo 127.0.0.1 up

#-----------------------------------------------------------------------
###
#
# home dir section
# Check for persistent homedir option and eventually mount /home from there,
# or use a loopback file.
#
# Bootoption: home=/dev/* | home=/mnt/* | home=scan | home=create
#
###

    HOMEDIR="$(getbootparam home)"
    MYHOMEDEVICE=""
    MYHOMEMOUNTPOINT=""
    MYHOMEDIR=""
    if [ -n "$HOMEDIR" ]; then
	export HOMEDIR
	case "$HOMEDIR" in
	    /dev/*)
		MYHOMEDEVICE="${HOMEDIR##/dev/}"
		MYHOMEDEVICE="/dev/${MYHOMEDEVICE%%/*}"
		MYHOMEMOUNTPOINT="/mnt/${MYHOMEDEVICE##/dev/}"
		MYHOMEDIR="/mnt/${HOMEDIR##/dev/}"
		;;
	    /mnt/*)
		MYHOMEDEVICE="${HOMEDIR##/mnt/}"
		MYHOMEDEVICE="/dev/${MYHOMEDEVICE%%/*}"
		MYHOMEMOUNTPOINT="/mnt/${MYHOMEDEVICE##/dev/}"
		MYHOMEDIR="$HOMEDIR"
		;;
	    [Ss][Cc][Aa][Nn])
		MYHOMEDIR="$(findfile morphix.img)"
		MYHOMEDEVICE="${MYHOMEDIR##/mnt/}"
		MYHOMEDEVICE="/dev/${MYHOMEDEVICE%%/*}"
		MYHOMEMOUNTPOINT="/mnt/${MYHOMEDEVICE##/dev/}"
		;;
		[Cc][Rr][Ee][Aa][Tt][Ee])
		MYHOMEDIR="$(createfile morphix.img)"
		MYHOMEDEVICE="${MYHOMEDIR##/mnt/}"
		MYHOMEDEVICE="/dev/${MYHOMEDEVICE%%/*}"
		MYHOMEMOUNTPOINT="/mnt/${MYHOMEDEVICE##/dev/}"
		echo "${GREEN} Create home file in $MYHOMEDIR ${NORMAL}"
		;;
		*)
		echo "${CRE}${RED}Invalid ${CYAN}home=${RED} option '$HOMEDIR' specified (must start with /dev/ or /mnt/ or 'scan').${NORMAL}"
		echo "${CRE}${RED}Option ignored.${NORMAL}"
		;;
		esac
	fi
###
#
# Cheking for persistant /home on local hdd subdirectory
# will be merged with the main /home function
#
# Bootoption: fromdirectory=dirname This bootoption is set 
#             by the windows installer
#
###
    OPT=""
    LOOPN=""
    BINDSWAP=""
    BINDHOME=""
    HD_DIRECTORY="$(getbootparam fromdirectory)"
    MOUNT_IMAGE="localrw"
    if test -n "$HD_DIRECTORY";then
       /bin/mount -o remount,rw /$MOUNT_IMAGE
        LOOPN=`grep -o -e "loop[0-9]*" /proc/mounts |grep -o -e "[0-9]"`
		BINDHOME=`ls -1r /$MOUNT_IMAGE/$HD_DIRECTORY/gelux-*.home 2>/dev/null|head -n1`
		BINDSWAP=`ls -1r /$MOUNT_IMAGE/$HD_DIRECTORY/gelux-*.swap 2>/dev/null|head -n1`

        OPT="-o rw"
#Check for swap!
		if [ -n "$BINDSWAP" ];then
          #must be avoid
          if ! swapon "$BINDSWAP" 2>/dev/null;then
            echo "${CRE}${BLUE}Formating swap device${NORMAL}"
            mkswap "$BINDSWAP" 2>/dev/null
            swapon "$BINDSWAP"
          fi
          [ "$?" != "0" ] && echo "${CRE}${BLUE}Using swap file : ${YELLOW}$BINDSWAP ${NORMAL}"
        fi
    fi
    
	if test -n "$BINDHOME" ; then
      echo "${CRE}${BLUE}Using home file : ${YELLOW}$BINDHOME ${NORMAL}"
      echo -n "${YELLOW}"
      /sbin/e2fsck -yf "$BINDHOME"  2>/dev/null
      echo "${NORMAL}"
      rm /home
      mkdir /home
      if ! /bin/mount -o loop,rw "$BINDHOME" /home 1>/dev/null;then
        rmdir /home
        ln -s /ramdisk/home /
        BINDHOME=""
       echo "${RED}ERROR on using /home with $BINDHOME${NORMAL}"
      else
        [ -d /home/$USERNAME ] && MYHOMEDIR="$BINDHOME"
      fi
      mkdir /home/root
    fi
#----------------------------------------------------(4) (?)
	
#----------------------------------------------------(5) (still $HOMEDIR options)
echo "HOMEDIR='$MYHOMEDIR'">> /etc/sysconfig/$lname

if [ -n "$MYHOMEDIR" -a -z "$BINDHOME" ]; then
    if trymount "$MYHOMEDEVICE" "$MYHOMEMOUNTPOINT"; then
	[ -f "$MYHOMEMOUNTPOINT/morphix.img" ] && MYHOMEDIR="$MYHOMEMOUNTPOINT/morphix.img"
	while read device mountpoint fs relax; do
	    case "$mountpoint" in *$MYHOMEMOUNTPOINT*)
		    case "$fs" in *[Nn][Tt][Ff][Ss]*)
		    umount "$MYHOMEMOUNTPOINT"; echo " ${RED}ERROR: WON'T MOUNT NTFS FILESYSTEM ON $MYHOMEDEVICE READ/WRITE!"
		    break
		    ;;
			*[Ff][Aa][Tt]*)
# Note: This currently won't work with encrypted partitions
			umount "$MYHOMEMOUNTPOINT"; mount -t vfat -o rw,uid=$USERNAME,gid=users,umask=002 "$MYHOMEDEVICE" "$MYHOMEMOUNTPOINT"
			if [ ! -f "$MYHOMEDIR" ]; then
			    echo " ${RED}WARNING: FAT32 is not a good filesystem option for /home/$USERNAME (missing socket/symlink support).${NORMAL}"
			    echo " ${RED}WARNING: Better use an ext2 loopback file on this device, and boot with home=$MYHOMEDEVICE/morphix.img.${NORMAL}"
			fi
			;;
			esac
			if mount -o remount,rw "$MYHOMEMOUNTPOINT"; then
			    echo -n " ${GREEN} Mounting ${YELLOW}$MYHOMEDIR${GREEN} as ${YELLOW}/home/$USERNAME${GREEN}... "
			    if [ -f "$MYHOMEDIR" ]; then
# It's a loopback file, mount it over the /home/$USERNAME directory
				mkdir /home/$USERNAME &>/dev/null

				trymount "$MYHOMEDIR" /home/$USERNAME
				RC="$?"
				[ "$RC" = "0" ] && ERROR="$(mount -o remount,rw,sync /home/$USERNAME 2>&1)"
				RC="$?"
			    else
# Do a --bind mount
				ERROR="$(mount --bind "$MYHOMEDIR" /home/$USERNAME 2>&1)"
				RC="$?"
			    fi
			    mount --bind /home/$USERNAME /mnt/main/home/$USERNAME
			    [ "$RC" = "0" ] && echo "${GREEN} /home/$USERNAME mounted OK.${NORMAL}" || { echo "${RED}FAILED."; echo "$ERROR${NORMAL}"; }
			fi
			break
			;;
			esac
			done <<EOT
$(cat /proc/mounts)
EOT
			fi
fi
#-----------------------------------------------------------------------


# LOCALES (now in DSSLV-debconf)
#if [ "$LANG" != "C" ]; then 
#	if [ -f "/etc/locale.gen" ];then
#	  GENERATE_LANG=`grep -i "$LANG" /etc/locale.gen`
#	else
#	  :>/etc/locale.gen
#	fi
# * GENERATE_LANG=`grep -i "$LANG" /mnt/main/etc/locale.gen`
# independant checking because there can be LANG in locale.gen, but
# not generated and vice versa
#    if [ -z "$GENERATE_LANG" ]; then 
    #In previous version of script >> was used, but then booting takes
    #a lot of time, when several locales are in locale.gen already
#	 echo "$LANG UTF-8" > /etc/locale.gen 
	# * echo "$LANG UTF-8" > /mnt/main/etc/locale.gen
#    fi
#TODO: localedef needs a little bit testing in real booting from CD -
#in my environment all things works without problems
#   	GENERATE_LANG=` localedef --list-archive | grep -i "$LANG"`
   # *	GENERATE_LANG=`chroot /mnt/main localedef --list-archive | grep -i "$LANG"`
#    if [ -z "$GENERATE_LANG" ]; then 
#	locale-gen &
	#chroot /mnt/main locale-gen &
#    fi
#fi

# KEYBOARD
# Read default keyboard from config file.
# There seems to be no reliable autoprobe possible.
# These are started in the background for the same reason as above
[ -f /etc/sysconfig/keyboard ] && . /etc/sysconfig/keyboard
# Set default keyboard before interactive setup

[ -n "$KEYTABLE" ] &&  loadkeys -q $KEYTABLE &
[ -n "$CONSOLEFONT" ] &&  consolechars -f $CONSOLEFONT &



# USER
HOMEDIR="$(getbootparam home)"
if test -z "$MYHOMEDIR" -o "$HOMEDIR" = "create" ;then
    useradd -m $USERNAME -s /bin/bash
else
	 mkdir -p /home/$USERNAME/Desktop/Autostart
     useradd -s /bin/bash $USERNAME
	 chown -R $USERNAME.users /home/$USERNAME
fi

# wish this could be neater, but if one group fails they otherwise all would
 usermod -G dialout,dip,cdrom,video,audio,games,users,plugdev,tty,lp,floppy,voice $USERNAME
# unlock the users password
 usermod -U $USERNAME
 
# BUG TTY
chmod 0777 /dev/zero

# Small bugfix for /dev/tty0 problem
if [ ! -x /etc/init.d/udev ];then
  rm /dev/tty0
  mknod /dev/tty0 c 4 0
  chmod 660 /dev/tty0
  chgrp tty /dev/tty0
fi


#[ -n "$NEWXMODULE" ] && { XMODULE="$NEWXMODULE" ; echo "XMODULE='$XMODULE'" >> /etc/sysconfig/$lname ; echo "XMODULE='$XMODULE'" >> /etc/sysconfig/xserver; }


# DHCP
if checkbootparam "nodhcp"; then
    echo " ${GREEN} Skipping DHCP broadcast/network detection as requested on boot commandline.${NORMAL}"
else
    NETDEVICES="$(awk -F: '/eth.:|tr.:/{print $1}' /proc/net/dev 2>/dev/null)"
    for DEVICE in $NETDEVICES
      do
     # echo -n " ${GREEN} Network device ${MAGENTA}$DEVICE${GREEN} detected, DHCP broadcasting for IP.${NORMAL}"
      trap 2 3 11
      if [ -x /sbin/pump ]; then
	  pump -i $DEVICE >/dev/null 2>&1 &
      elif [ -x /sbin/dhclient ]; then
	  dhclient $DEVICE >/dev/null 2>&1 &
      elif [ -x /sbin/dhcpcd ]; then
	  dhcpcd $DEVICE >/dev/null 2>&1 &
      else
	  echo "${RED} Unable to find pump, dhclient or dhcpd. Make sure base has a dhcp client installed${NORMAL}"
      fi
      trap "" 2 3 11
      sleep 1
    done
fi


# DEB PKGES FROM /cdrom
deb_dpkg_unionfs /DSSLV # dpkg -i pkges in /DSSLV/deb/

}
log_begin_msg "Configuring $LIVENAME" 
start > /dev/null
log_end_msg 0

