#!/bin/sh

# $Id$

# DSS-LV 
# Daniele Favara <danjele@gmail.com> 2005
# <http://dss.berlios.de>


#PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin"
#export PATH
CMDLINE="$(cat /tmp/cmdline)"
#lname=dss

### Utility Function(s)

# Simple shell grep
stringinfile(){
    case "$(cat $2)" in *$1*) return 0;; esac
    return 1
}

# same for strings
stringinstring(){
    case "$2" in *$1*) return 0;; esac
    return 1
}

# Reread boot command line; echo last parameter's argument or return false.
getbootparam(){
    stringinstring " $1=" "$CMDLINE" || return 1
    result="${CMDLINE##*$1=}"
    result="${result%%[ 	]*}"
    echo "$result"
    return 0
}

# Check boot commandline for specified option
checkbootparam(){
    stringinstring " $1" "$CMDLINE"
    return "$?"
}



#
# Search local disks partitions
#
get_partitions ()
{
	echo $(ls /dev/[sh]d[a-z]?*)
}

#
# Check filesystem
#
get_filesystem ()
{
	ret=$(sudo file -s $1)
	case $ret in
		*ext3*)
			echo "$1 ext3"
			;;
		*ext2*)
			echo "$1 ext3"
			;;
		*reiserfs*)
			echo "$1 reiserfs"
			;;
		*XFS*)
			echo "$1 xfs"
			;;
		*vfat*)
			echo "$1 vfat"
			;;
		*ntfs*)
			echo "$1 ntfs"
			;;
		*swap*)
			echo "$1 swap"
			;;
		*)
			echo "$1 auto"
			;;
	esac
}

#
# Search for CD/DVDs
#
get_cdroms ()
{
	echo $(head -3 /proc/sys/dev/cdrom/info | tail -1 | cut -f 3-)
}

#
# Create fstab
#
create_fstab ()
{
	if $(grep rw /proc/cmdline) ; then
		defaults="    defaults,noauto        0       2"
	else
		defaults="    ro,users,noauto        0       2"
	fi
	partitions=$(get_partitions)
	for part in $partitions; do
		entry=$(get_filesystem $part)
		dev=$(echo $entry | cut -d ' ' -f 1 )
		fs=$(echo $entry | cut -d ' ' -f 2 )
		if [ "$fs" == "swap" ] ; then
			entry="${dev}	none	swap    sw              0       0"
		else
			mntpoint="$MNTPOINT/${dev#/dev/}"
			mkdir -p $mntpoint
			#entry="${dev}	${mntpoint}	${fs}${defaults}"
			entry="${dev}"
		fi
		echo $entry >> /etc/pmount.allow
	done
	num=0
	cdroms=$(get_cdroms)
	for cd in $cdroms; do
		#entry="/dev/${cd}        $MNTPOINT/cdrom${num}   udf,iso9660 ro,user,noauto  0       0"
		entry="/dev/${cd}"
		let num=num+1
		echo $entry >> /etc/pmount.allow
	done
	
}

get_device ()
{
	dev=$(grep /.dirs/dev /proc/mounts | cut -d " " -f 1)
	echo $dev
}


findfile(){
    FOUND=""
# search all partitions for a file in the root directory
    for i in $MNTPOINT/[sh]d[a-z] $MNTPOINT/[sh]d[a-z][1-9] $MNTPOINT/[sh]d[a-z][1-9]?*; do
# See if it's already mounted
	[ -f "$i/$1" ] &&  { echo "$i/$1"; return 0; }
	if [ -d "$i" ] && mount -r "$i" 2>/dev/null; then
	    [ -f "$i/$1" ] && FOUND="$i/$1"
	    umount -l "$i" 2>/dev/null
	    [ -n "$FOUND" ] && { echo "$FOUND"; return 0; }
	fi
    done
    return 2
}

###
#
# create the home image
# look for USB memory device first
#
###

createfile(){
FOUND=""
# search all partitions for a file in the root directory
for i in $MNTPOINT/sd[a-z] $MNTPOINT/sd[a-z][1-9] $MNTPOINT/hd[a-z][1-9] $MNTPOINT/hd[a-z] $MNTPOINT/[sh]d[a-z][1-9]?*; do
  # See if it's already mount ant exist
    [ -f "$i/$1" ] &&  { echo "$i/$1"; return 0; }
    
  # mountit and create
    if [ -d "$i" ] && mount -o rw "$i" 2>/dev/null; 
	then
    # See if it's already exist
	if [ -f "$i/$1" ];then
	    FOUND="$i/$1"
	    umount -l "$i" 2>/dev/null
	    echo "$FOUND" 
	    return 0
	fi  
	
	MIN_HOME="51200"
	MAX_HOME="102400"
	fs=`mount | grep $i |while read  mdev mon mount mtype mfs mopt;do echo $mfs;done`;
	case "$fs" in *[Nn][Tt][Ff][Ss]*)
;;
*)
        DEVICE_SIZE=`LANG=C df -hk $i | tail -n1| cut -c 41-50`
	if test -n "$DEVICE_SIZE" -a "$(expr $DEVICE_SIZE / 1)" -gt "$MAX_HOME"; then
	    if dd if=/dev/zero of=$i/$1 bs=1K count=$MAX_HOME;then
	        mke2fs -q -F $i/$1
	        e2fsck -y $i/$1
	        umount -l "$i" 2>/dev/null
	        FOUND="$i/$1"
	        echo "$FOUND" 
	        return 0
	    fi
	fi

	if test -n "$DEVICE_SIZE" -a "$(expr $DEVICE_SIZE / 1)" -gt "$MIN_HOME"; then
	    if dd if=/dev/zero of=$i/$1 bs=1K count=$MIN_HOME;then
	        mke2fs -q -F $i/$1
	        e2fsck -y $i/$1
	        umount -l "$i" 2>/dev/null
	        FOUND="$i/$1"
	        echo "$FOUND" 
	        return 0
	    else
	        umount -l "$i" 2>/dev/null		
	    fi
	fi
	;;
	esac
  fi
  done
return 2
}

# Try to mount this filesystem read-only, without or with encryption
trymount(){
# Apparently, mount-aes DOES autodetect AES loopback files.
    [ -b "$1" ] && { mount -t auto -o ro "$1" "$2" 2>/dev/null; RC="$?"; }
# We need to mount crypto-loop files with initial rw support
    [ -f "$1" ] && { mount -t auto -o loop,rw "$1" "$2" 2>/dev/null; RC="$?"; }
    [ "$RC" = "0" ] && return 0
    echo ""
    echo "${CYAN}Filesystem not autodetected, trying to mount $1 with AES256 encryption${NORMAL}"
    a="y"
    while [ "$a" != "n" -a "$a" != "N" ]; do
# We need to mount crypto-loop files with initial rw support
	mount -t auto -o loop,rw,encryption=AES256 "$1" "$2" && return 0
	echo -n "${RED}Mount failed, retry? [Y/n] ${NORMAL}"
	read a
    done
    return 1
}

# Install debian packages (deps not resolved)
deb_dpkg_unionfs() {
    USEDIR=$1

#  install all debian packages in /deb on the cdrom

    DEBS="$( ls $1/deb/*.deb 2>/dev/null | wc -l )"
    if [ $DEBS -gt 0 ]; then
		 dpkg -i --force-all $1/deb/*.deb
    fi
    
# copy all files in /copy of the iso to the filesystem

    COPY="$(ls -l $1/copy/*  2>/dev/null | wc -l )"
    if [ $COPY -gt 0 ]; then
	cp -a $1/copy/* /
	 chown -R $USERNAME.users /home/$USERNAME
	 chmod -R u+w /home/$USERNAME
    fi
    
#  execute scripts 
    EXECS="$( ls $1/exec/* 2>/dev/null )"
    EXECSCOUNT="$( ls $1/exec/*  2>/dev/null | wc -l )"
    if [ $EXECSCOUNT -gt 0 ]; then
	for file in $EXECS
	  do
	   sh -c ". $file"
	done
    fi
}

setlocales (){
case "$LANGUAGE" in
    de)
	COUNTRY="de"
	LANG="de_DE@euro"
	KEYTABLE="de-latin1-nodeadkeys"
	XKEYBOARD="de"
	KDEKEYBOARD="de"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,fr"
	TZ="Europe/Berlin"
	;;
# BE version
    be)
	LANGUAGE="be"
	COUNTRY="be"
	LANG="C" # used to be "be", but thats Belgarian, not belgian
	KEYTABLE="be-latin1"
	XKEYBOARD="be"
	KDEKEYBOARD="be"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	TZ="Europe/Brussels"
	;;
    bg)
	LANGUAGE="bg"
	COUNTRY="bg"
	LANG="bg_BG"
	KEYTABLE="bg"
	XKEYBOARD="bg"
	KDEKEYBOARD="bg"
	CHARSET="microsoft-cp1251"
 # Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	TZ="Europe/Sofia"
;;
# Swiss version (basically de with some modifications)
    ch)
	LANGUAGE="de"
	COUNTRY="ch"
	LANG="de_CH"
	KEYTABLE="sg-latin1"
	XKEYBOARD="de_CH"
	KDEKEYBOARD="de_CH"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us,fr"
	TZ="Europe/Zurich"
	;;
    cn)
# Simplified Chinese version
	COUNTRY="cn"
	LANG="zh_CN.GB2312"
	KEYTABLE="us"
	XKEYBOARD="us"
	KDEKEYBOARD="us"
	CHARSET="gb2312.1980-0"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	XMODIFIERS="@im=Chinput"
	TZ="Asia/Shanghai"
	;;
# Czech version
    cs|cz)
	LANGUAGE="cs"
	COUNTRY="cs"
	LANG="cs_CZ"
	KEYTABLE="cz-lat2"
	XKEYBOARD="cs"
	KDEKEYBOARD="cs"
	CHARSET="iso8859-2"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	TZ="Europe/Prague"
	;;
    dk|da)
# Dansk version
	COUNTRY="dk"
	LANG="da_DK"
# Workaround: "dk" broken in gettext, use da:da_DK
	LANGUAGE="da:da_DK"
# Keytable "dk" is correct.
	KEYTABLE="dk"
	XKEYBOARD="dk"
	KDEKEYBOARD="dk"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="dk,de,us,fr"
	TZ="Europe/Copenhagen"
	;;
# Greek version
    el)
	LANGUAGE="el"
	COUNTRY="gr"
	LANG="el_GR"
	KEYTABLE="gr-pc"
	XKEYBOARD="el"
	KDEKEYBOARD="el"
	CHARSET="iso8859-7"
# Additional KDE Keyboards
	KDEKEYBOARDS="el,us"
	;;
    es)
# Spanish version
	COUNTRY="es"
	LANG="es_ES@euro"
	KEYTABLE="es"
	XKEYBOARD="es"
	KDEKEYBOARD="es"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us,fr"
	TZ="Europe/Madrid"
	;;
    fi)
# finnish version, though we may not have the kde-i18n files
	COUNTRY="fi"
	LANG="fi_FI@euro"
	KEYTABLE="fi"
	XKEYBOARD="fi"
	KDEKEYBOARD="fi"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="us"
	TZ="Europe/Helsinki"
	;;
    fr)
# french version
	COUNTRY="fr"
	LANG="fr_FR@euro"
	KEYTABLE="fr"
	XKEYBOARD="fr"
	KDEKEYBOARD="fr"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us"
	;;
    gl)
# galician version
	COUNTRY="es"
	LANG="gl_ES"
	KEYTABLE="es"
	XKEYBOARD="es"
	KDEKEYBOARD="es"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="es"
	;;
    he|il)
# Hebrew version
	LANGUAGE="he"
	COUNTRY="il"
	LANG="he_IL"
	KEYTABLE="us"
	XKEYBOARD="us"
	KDEKEYBOARD="il"
	CHARSET="iso8859-8"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,fr,de"
	TZ="Asia/Jerusalem"
	;;
    it)
# italian version
	COUNTRY="it"
	LANG="it_IT@euro"
	KEYTABLE="it"
	XKEYBOARD="it"
	KDEKEYBOARD="it"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="fr,us,de"
	TZ="Europe/Rome"
	;;

    ja)
# (limited) japanese version
	COUNTRY="jp"
	LANG="ja_JP"
	LANGUAGE="ja"
	KEYTABLE="us"
	XKEYBOARD="us"
	KDEKEYBOARD="us"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="fr,us,de"
	TZ="Asia/Tokyo"
	;;
    lv)
# Latvian version
	LANGUAGE="lv"  # ISO 639
	COUNTRY="lv"
	LANG="lv_LV"
	KEYTABLE="lv-latin7" 
	XKEYBOARD="lv" 
	KDEKEYBOARD="lv" 
	CHARSET="iso8859-13"
	KDEKEYBOARDS="ee,lt,en_US,ru" # Additional KDE Keyboards 
	;;
    lt)
# Lithuanian version
	LANGUAGE="lt"  # ISO 639
	COUNTRY="lt" 
	LANG="lt_LT" 
	KEYTABLE="lt" 
	XKEYBOARD="lt,us,ru"
	KDEKEYBOARD="lt" 
	CHARSET="iso8859-13"
	KDEKEYBOARDS="ee,lv,en_US,ru" # Additional KDE Keyboards 
	;;
    nl)
# netherland version
	COUNTRY="nl"
	LANG="nl_NL@euro"
	KEYTABLE="us"
	XKEYBOARD="us,nl"
	KDEKEYBOARD="us"
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="nl,de,fr"
	TZ="Europe/Amsterdam" # Hup holland hup! :D
	;;
    pl)
# Polish version
	COUNTRY="pl"
	LANG="pl_PL"
	KEYTABLE="pl"
	XKEYBOARD="pl"
	KDEKEYBOARD="pl"
	CHARSET="iso8859-2"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us,fr"
	TZ="Europe/Warsaw"
	;;
    ru)
# Russian version
	COUNTRY="ru"
	LANG="ru_RU.KOI8-R"
	KEYTABLE="ru"
	XKEYBOARD="ru"
	KDEKEYBOARD="ru"
	CHARSET="koi8-r"
	CONSOLEFONT="Cyr_a8x16"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us,fr"
	TZ="Europe/Moscow"
	;;
    sf)
# Swiss french version
	LANGUAGE="fr_CH"
	COUNTRY="ch"
	LANG="fr_CH"
	KEYTABLE="fr_CH-latin1"
	XKEYBOARD="fr_CH"
	KDEKEYBOARD="fr_CH"
	CONSOLEFONT="lat1-12"
#I'm not sure with that
	CHARSET="iso8859-15"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,us,it"
	TZ="Europe/Zurich"
	;;
    sk)
# Slovak version (guessed)
	COUNTRY="sk"
	LANG="sk"
	KEYTABLE="sk-qwerty"
	XKEYBOARD="sk"
	KDEKEYBOARD="sk"
	CHARSET="iso8859-2"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	;;
# Slovenian version/keyboard, Fabians knoppix-autoconfig_i18n.patch from 2003-07-26
    sl)
	LANGUAGE="sl"
	COUNTRY="si"
	LANG="sl_SI"
	KEYTABLE="slovene"
	XKEYBOARD="sl,us"
	KDEKEYBOARD="si"
	CHARSET="iso8859-2"
	CONSOLEFONT="iso02g"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	TZ="Europe/Ljubljana"
	;;
    tr)
# Turkish version (guessed)
	COUNTRY="tr"
	LANG="tr_TR"
	KEYTABLE="tr_q-latin5"
	XKEYBOARD="tr"
	KDEKEYBOARD="tr"
	CHARSET="iso8859-9"
# Additional KDE Keyboards
	KDEKEYBOARDS="us,de,fr"
	TZ="Europe/Istanbul"
	;;
    tw)
# Traditional chinese version (thanks to Chung-Yen Chang)
	COUNTRY="tw"
	LANG="zh_TW.Big5"
	LANGUAGE="zh_TW.Big5"
	KEYTABLE="us"
	XKEYBOARD="us"
	KDEKEYBOARD="us"
# CHARSET="big5-0"
	CHARSET="iso8859-1"
# Additional KDE Keyboards
	KDEKEYBOARDS="us"
	XMODIFIERS="@im=xcin"
	TZ="Asia/Taipei"
	;;
    uk)
# british version
	LANGUAGE="en_GB"
	COUNTRY="uk"
	LANG="en_GB"
	KEYTABLE="uk"
	XKEYBOARD="uk"
	KDEKEYBOARD="gb"
	CHARSET="iso8859-1"
# Additional KDE Keyboards
	KDEKEYBOARDS="us"
	TZ="Europe/London"
	;;
    *)
# US version
	LANGUAGE="us"
	COUNTRY="us"
	LANG="C"
	KEYTABLE="us"
	XKEYBOARD="us"
	KDEKEYBOARD="us"
	CHARSET="iso8859-1"
# Additional KDE Keyboards
	KDEKEYBOARDS="de,fr"
	TZ="America/New_York"
    ;;
    
esac


}
